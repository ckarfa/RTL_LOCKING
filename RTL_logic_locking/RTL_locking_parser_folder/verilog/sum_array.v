// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sum_array,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=45,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=2,HLS_SYN_FF=128,HLS_SYN_LUT=327,HLS_VERSION=2018_3}" *)

module sum_array (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_return
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] array21_address0;
reg    array21_ce0;
wire   [4:0] array21_q0;
wire   [3:0] i_1_fu_214_p2;
reg   [3:0] i_1_reg_253;
wire    ap_CS_fsm_state6;
reg   [3:0] array1_addr_10_reg_258;
wire   [0:0] exitcond_fu_208_p2;
wire   [31:0] array1_q0;
reg  signed [31:0] array1_load_reg_269;
wire    ap_CS_fsm_state7;
reg   [4:0] array21_load_reg_274;
wire   [31:0] tmp_1_fu_229_p2;
reg   [31:0] tmp_1_reg_279;
wire    ap_CS_fsm_state8;
wire   [0:0] tmp_2_fu_234_p1;
reg   [0:0] tmp_2_reg_285;
wire   [31:0] sum_1_fu_243_p3;
wire    ap_CS_fsm_state9;
reg   [3:0] array1_address0;
reg    array1_ce0;
reg    array1_we0;
reg   [31:0] array1_d0;
reg   [3:0] array1_address1;
reg    array1_ce1;
reg    array1_we1;
reg   [31:0] array1_d1;
reg   [31:0] sum_reg_185;
wire    ap_CS_fsm_state5;
reg   [3:0] i_reg_197;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_fu_220_p1;
wire   [4:0] tmp_1_fu_229_p1;
wire   [31:0] sum_2_fu_238_p2;
reg   [8:0] ap_NS_fsm;
wire   [31:0] tmp_1_fu_229_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

sum_array_array21 #(
    .DataWidth( 5 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
array21_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(array21_address0),
    .ce0(array21_ce0),
    .q0(array21_q0)
);

sum_array_array1 #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
array1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(array1_address0),
    .ce0(array1_ce0),
    .we0(array1_we0),
    .d0(array1_d0),
    .q0(array1_q0),
    .address1(array1_address1),
    .ce1(array1_ce1),
    .we1(array1_we1),
    .d1(array1_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_reg_197 <= i_1_reg_253;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_197 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sum_reg_185 <= sum_1_fu_243_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sum_reg_185 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        array1_addr_10_reg_258 <= tmp_fu_220_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        array1_load_reg_269 <= array1_q0;
        array21_load_reg_274 <= array21_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_1_reg_253 <= i_1_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_1_reg_279 <= tmp_1_fu_229_p2;
        tmp_2_reg_285 <= tmp_2_fu_234_p1;
    end
end

always @ (*) begin
    if (((exitcond_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        array1_address0 = tmp_fu_220_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        array1_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        array1_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        array1_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        array1_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        array1_address0 = 64'd0;
    end else begin
        array1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        array1_address1 = array1_addr_10_reg_258;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        array1_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        array1_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        array1_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        array1_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        array1_address1 = 64'd1;
    end else begin
        array1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        array1_ce0 = 1'b1;
    end else begin
        array1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        array1_ce1 = 1'b1;
    end else begin
        array1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        array1_d0 = 32'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        array1_d0 = 32'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        array1_d0 = 32'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        array1_d0 = 32'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        array1_d0 = 32'd1;
    end else begin
        array1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        array1_d1 = tmp_1_reg_279;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        array1_d1 = 32'd10;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        array1_d1 = 32'd8;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        array1_d1 = 32'd6;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        array1_d1 = 32'd4;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        array1_d1 = 32'd2;
    end else begin
        array1_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        array1_we0 = 1'b1;
    end else begin
        array1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        array1_we1 = 1'b1;
    end else begin
        array1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        array21_ce0 = 1'b1;
    end else begin
        array21_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = sum_reg_185;

assign array21_address0 = tmp_fu_220_p1;

assign exitcond_fu_208_p2 = ((i_reg_197 == 4'd10) ? 1'b1 : 1'b0);

assign i_1_fu_214_p2 = (i_reg_197 + 4'd1);

assign sum_1_fu_243_p3 = ((tmp_2_reg_285[0:0] === 1'b1) ? sum_reg_185 : sum_2_fu_238_p2);

//assign tmp_2_reg_285_temp = tmp_2_reg_285 & 1'b1;

assign sum_2_fu_238_p2 = (tmp_1_reg_279 + sum_reg_185);

assign tmp_1_fu_229_p1 = tmp_1_fu_229_p10;

assign tmp_1_fu_229_p10 = array21_load_reg_274;

assign tmp_1_fu_229_p2 = ($signed(array1_load_reg_269) * $signed(tmp_1_fu_229_p1));

assign tmp_2_fu_234_p1 = tmp_1_fu_229_p2 & 1'b1;

assign tmp_fu_220_p1 = i_reg_197;

endmodule //sum_array
