// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="findMajority,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.815500,HLS_SYN_LAT=121,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=123,HLS_SYN_LUT=331,HLS_VERSION=2018_3}" *)

module findMajority (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] arr1_address0;
reg    arr1_ce0;
wire   [2:0] arr1_q0;
wire   [31:0] index_1_cast2_fu_123_p1;
reg   [31:0] index_1_cast2_reg_238;
wire    ap_CS_fsm_state2;
wire   [2:0] i_fu_133_p2;
reg   [2:0] i_reg_246;
wire   [0:0] exitcond1_fu_127_p2;
reg   [2:0] arr1_load_reg_261;
wire    ap_CS_fsm_state3;
wire   [2:0] j_1_fu_155_p2;
reg   [2:0] j_1_reg_269;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_149_p2;
wire   [31:0] i_0_index_fu_172_p3;
wire   [31:0] count_0_maxCount_fu_179_p3;
wire   [31:0] p_count_fu_198_p3;
wire    ap_CS_fsm_state5;
reg  signed [31:0] index_reg_65;
reg   [2:0] index_1_reg_77;
reg   [31:0] maxCount_reg_88;
reg   [2:0] j_reg_100;
reg   [31:0] maxCount_1_reg_111;
wire   [63:0] tmp_1_fu_139_p1;
wire  signed [63:0] tmp_2_fu_144_p1;
wire   [63:0] tmp_5_fu_161_p1;
wire   [0:0] tmp_3_fu_166_p2;
wire   [0:0] tmp_6_fu_187_p2;
wire   [31:0] count_fu_192_p2;
wire    ap_CS_fsm_state6;
wire   [29:0] tmp_fu_206_p4;
wire   [0:0] icmp_fu_216_p2;
wire   [3:0] arr1_load_1_cast_fu_222_p1;
wire   [3:0] p_0_fu_226_p3;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

findMajority_arr1 #(
    .DataWidth( 3 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
arr1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(arr1_address0),
    .ce0(arr1_ce0),
    .q0(arr1_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_149_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        index_1_reg_77 <= i_reg_246;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        index_1_reg_77 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_149_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        index_reg_65 <= i_0_index_fu_172_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        index_reg_65 <= 32'd4294967295;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_100 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_100 <= j_1_reg_269;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        maxCount_1_reg_111 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        maxCount_1_reg_111 <= p_count_fu_198_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_149_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        maxCount_reg_88 <= count_0_maxCount_fu_179_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        maxCount_reg_88 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        arr1_load_reg_261 <= arr1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_246 <= i_fu_133_p2;
        index_1_cast2_reg_238[2 : 0] <= index_1_cast2_fu_123_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_1_reg_269 <= j_1_fu_155_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        arr1_address0 = tmp_5_fu_161_p1;
    end else if (((exitcond1_fu_127_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        arr1_address0 = tmp_2_fu_144_p1;
    end else if (((exitcond1_fu_127_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        arr1_address0 = tmp_1_fu_139_p1;
    end else begin
        arr1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((exitcond1_fu_127_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((exitcond1_fu_127_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        arr1_ce0 = 1'b1;
    end else begin
        arr1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_127_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_149_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_return = $signed(p_0_fu_226_p3);

assign arr1_load_1_cast_fu_222_p1 = arr1_q0;

assign count_0_maxCount_fu_179_p3 = ((tmp_3_fu_166_p2[0:0] === 1'b1) ? maxCount_1_reg_111 : maxCount_reg_88);

assign count_fu_192_p2 = (maxCount_1_reg_111 + 32'd1);

assign exitcond1_fu_127_p2 = ((index_1_reg_77 == 3'd7) ? 1'b1 : 1'b0);

assign exitcond_fu_149_p2 = ((j_reg_100 == 3'd7) ? 1'b1 : 1'b0);

assign i_0_index_fu_172_p3 = ((tmp_3_fu_166_p2[0:0] === 1'b1) ? index_1_cast2_reg_238 : index_reg_65);

assign i_fu_133_p2 = (index_1_reg_77 + 3'd1);

assign icmp_fu_216_p2 = (($signed(tmp_fu_206_p4) > $signed(30'd0)) ? 1'b1 : 1'b0);

assign index_1_cast2_fu_123_p1 = index_1_reg_77;

assign j_1_fu_155_p2 = (j_reg_100 + 3'd1);

assign p_0_fu_226_p3 = ((icmp_fu_216_p2[0:0] === 1'b1) ? arr1_load_1_cast_fu_222_p1 : 4'd15);

assign p_count_fu_198_p3 = ((tmp_6_fu_187_p2[0:0] === 1'b1) ? count_fu_192_p2 : maxCount_1_reg_111);

assign tmp_1_fu_139_p1 = index_1_reg_77;

assign tmp_2_fu_144_p1 = index_reg_65;

assign tmp_3_fu_166_p2 = (($signed(maxCount_1_reg_111) > $signed(maxCount_reg_88)) ? 1'b1 : 1'b0);

assign tmp_5_fu_161_p1 = j_reg_100;

assign tmp_6_fu_187_p2 = ((arr1_load_reg_261 == arr1_q0) ? 1'b1 : 1'b0);

assign tmp_fu_206_p4 = {{maxCount_reg_88[31:2]}};

always @ (posedge ap_clk) begin
    index_1_cast2_reg_238[31:3] <= 29'b00000000000000000000000000000;
end

endmodule //findMajority
