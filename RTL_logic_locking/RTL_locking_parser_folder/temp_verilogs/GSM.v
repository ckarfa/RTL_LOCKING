// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="GSM,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.803125,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=49,HLS_SYN_FF=3977,HLS_SYN_LUT=6810,HLS_VERSION=2019_2}" *)

module GSM (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        so_address0,
        so_ce0,
        so_we0,
        so_d0,
        so_q0,
        so_address1,
        so_ce1,
        so_we1,
        so_d1,
        so_q1,
        LARc_address0,
        LARc_ce0,
        LARc_we0,
        LARc_d0,
        LARc_q0,
        LARc_address1,
        LARc_ce1,
        LARc_we1,
        LARc_d1,
        LARc_q1
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] so_address0;
output   so_ce0;
output   so_we0;
output  [15:0] so_d0;
input  [15:0] so_q0;
output  [7:0] so_address1;
output   so_ce1;
output   so_we1;
output  [15:0] so_d1;
input  [15:0] so_q1;
output  [2:0] LARc_address0;
output   LARc_ce0;
output   LARc_we0;
output  [15:0] LARc_d0;
input  [15:0] LARc_q0;
output  [2:0] LARc_address1;
output   LARc_ce1;
output   LARc_we1;
output  [15:0] LARc_d1;
input  [15:0] LARc_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_Gsm_LPC_Analysis_fu_14_ap_start;
wire    grp_Gsm_LPC_Analysis_fu_14_ap_done;
wire    grp_Gsm_LPC_Analysis_fu_14_ap_idle;
wire    grp_Gsm_LPC_Analysis_fu_14_ap_ready;
wire   [7:0] grp_Gsm_LPC_Analysis_fu_14_s_address0;
wire    grp_Gsm_LPC_Analysis_fu_14_s_ce0;
wire    grp_Gsm_LPC_Analysis_fu_14_s_we0;
wire   [15:0] grp_Gsm_LPC_Analysis_fu_14_s_d0;
wire   [7:0] grp_Gsm_LPC_Analysis_fu_14_s_address1;
wire    grp_Gsm_LPC_Analysis_fu_14_s_ce1;
wire    grp_Gsm_LPC_Analysis_fu_14_s_we1;
wire   [15:0] grp_Gsm_LPC_Analysis_fu_14_s_d1;
wire   [2:0] grp_Gsm_LPC_Analysis_fu_14_LARc_address0;
wire    grp_Gsm_LPC_Analysis_fu_14_LARc_ce0;
wire    grp_Gsm_LPC_Analysis_fu_14_LARc_we0;
wire   [15:0] grp_Gsm_LPC_Analysis_fu_14_LARc_d0;
wire   [2:0] grp_Gsm_LPC_Analysis_fu_14_LARc_address1;
wire    grp_Gsm_LPC_Analysis_fu_14_LARc_ce1;
wire    grp_Gsm_LPC_Analysis_fu_14_LARc_we1;
wire   [15:0] grp_Gsm_LPC_Analysis_fu_14_LARc_d1;
reg    grp_Gsm_LPC_Analysis_fu_14_ap_start_reg;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_Gsm_LPC_Analysis_fu_14_ap_start_reg = 1'b0;
end

Gsm_LPC_Analysis grp_Gsm_LPC_Analysis_fu_14(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Gsm_LPC_Analysis_fu_14_ap_start),
    .ap_done(grp_Gsm_LPC_Analysis_fu_14_ap_done),
    .ap_idle(grp_Gsm_LPC_Analysis_fu_14_ap_idle),
    .ap_ready(grp_Gsm_LPC_Analysis_fu_14_ap_ready),
    .s_address0(grp_Gsm_LPC_Analysis_fu_14_s_address0),
    .s_ce0(grp_Gsm_LPC_Analysis_fu_14_s_ce0),
    .s_we0(grp_Gsm_LPC_Analysis_fu_14_s_we0),
    .s_d0(grp_Gsm_LPC_Analysis_fu_14_s_d0),
    .s_q0(so_q0),
    .s_address1(grp_Gsm_LPC_Analysis_fu_14_s_address1),
    .s_ce1(grp_Gsm_LPC_Analysis_fu_14_s_ce1),
    .s_we1(grp_Gsm_LPC_Analysis_fu_14_s_we1),
    .s_d1(grp_Gsm_LPC_Analysis_fu_14_s_d1),
    .s_q1(so_q1),
    .LARc_address0(grp_Gsm_LPC_Analysis_fu_14_LARc_address0),
    .LARc_ce0(grp_Gsm_LPC_Analysis_fu_14_LARc_ce0),
    .LARc_we0(grp_Gsm_LPC_Analysis_fu_14_LARc_we0),
    .LARc_d0(grp_Gsm_LPC_Analysis_fu_14_LARc_d0),
    .LARc_q0(LARc_q0),
    .LARc_address1(grp_Gsm_LPC_Analysis_fu_14_LARc_address1),
    .LARc_ce1(grp_Gsm_LPC_Analysis_fu_14_LARc_ce1),
    .LARc_we1(grp_Gsm_LPC_Analysis_fu_14_LARc_we1),
    .LARc_d1(grp_Gsm_LPC_Analysis_fu_14_LARc_d1),
    .LARc_q1(LARc_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Gsm_LPC_Analysis_fu_14_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_Gsm_LPC_Analysis_fu_14_ap_start_reg <= 1'b1;
        end else if ((grp_Gsm_LPC_Analysis_fu_14_ap_ready == 1'b1)) begin
            grp_Gsm_LPC_Analysis_fu_14_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((grp_Gsm_LPC_Analysis_fu_14_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_Gsm_LPC_Analysis_fu_14_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_Gsm_LPC_Analysis_fu_14_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LARc_address0 = grp_Gsm_LPC_Analysis_fu_14_LARc_address0;

assign LARc_address1 = grp_Gsm_LPC_Analysis_fu_14_LARc_address1;

assign LARc_ce0 = grp_Gsm_LPC_Analysis_fu_14_LARc_ce0;

assign LARc_ce1 = grp_Gsm_LPC_Analysis_fu_14_LARc_ce1;

assign LARc_d0 = grp_Gsm_LPC_Analysis_fu_14_LARc_d0;

assign LARc_d1 = grp_Gsm_LPC_Analysis_fu_14_LARc_d1;

assign LARc_we0 = grp_Gsm_LPC_Analysis_fu_14_LARc_we0;

assign LARc_we1 = grp_Gsm_LPC_Analysis_fu_14_LARc_we1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign grp_Gsm_LPC_Analysis_fu_14_ap_start = grp_Gsm_LPC_Analysis_fu_14_ap_start_reg;

assign so_address0 = grp_Gsm_LPC_Analysis_fu_14_s_address0;

assign so_address1 = grp_Gsm_LPC_Analysis_fu_14_s_address1;

assign so_ce0 = grp_Gsm_LPC_Analysis_fu_14_s_ce0;

assign so_ce1 = grp_Gsm_LPC_Analysis_fu_14_s_ce1;

assign so_d0 = grp_Gsm_LPC_Analysis_fu_14_s_d0;

assign so_d1 = grp_Gsm_LPC_Analysis_fu_14_s_d1;

assign so_we0 = grp_Gsm_LPC_Analysis_fu_14_s_we0;

assign so_we1 = grp_Gsm_LPC_Analysis_fu_14_s_we1;

endmodule //GSM
